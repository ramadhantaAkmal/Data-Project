# -*- coding: utf-8 -*-
"""Submission Proyek Kedua: Membuat Model Machine Learning dengan Data Time Series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xI4gmSw3ffLoqUJzbZ_85r5KIm7SWvWM

# Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from keras.layers import Dense, LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.callbacks import ReduceLROnPlateau
from sklearn.impute import SimpleImputer

"""# Data Loading"""

#source: https://www.kaggle.com/datasets/berkeleyearth/climate-change-earth-surface-temperature-data?select=GlobalTemperatures.csv
df = pd.read_csv('GlobalLandTemperaturesByCountry.csv', header=0, index_col=0)
df

df_train = df.loc[df['Country'].isin(['Indonesia'])]
display(df_train)

df_train=df_train.iloc[:,0:1]
df_train

"""# Data Prepocessing"""

#Menghitung nilai null
df_train.isnull().sum()

#Mengganti nilai null
miss_mean_imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')
miss_mean_imputer = miss_mean_imputer.fit(df_train)
df_train_imputed = miss_mean_imputer.transform(df_train.values)

#Memisahkan data tanggal dan data temperatur
date = df_train.reset_index(level=0)
date = date['dt']

values = df_train_imputed
temp = values.reshape((len(values), 1))

plt.figure(figsize=(15,5))
plt.plot(date, temp)
plt.title('Temperature average',
          fontsize=20);

#Normalisasi data temperatur dengan MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))
scaler = scaler.fit(temp)
temp_normalized = scaler.transform(temp)
temp_normalized

#Menghitung nilai ambang batas dari data
threshold_mae = (temp_normalized.max() - temp_normalized.min()) * 10/100
print(threshold_mae)

"""# Splitting and Transform Data"""

x_train, x_test, y_train, y_test = train_test_split(temp_normalized, date, test_size = 0.2, shuffle = False )

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(x_train, window_size=64, batch_size=32, shuffle_buffer=1000)
val_set = windowed_dataset(x_test, window_size=64, batch_size=32, shuffle_buffer=1000)

"""# Modeling"""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True, input_shape=(64,1)),

  tf.keras.layers.Dense(32, activation="relu"),
  tf.keras.layers.Dropout(0.09),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set,
                    validation_data = val_set, 
                    epochs=100,                  
                    verbose=1)

"""# Plotting Validation"""

#membuat grafik model accuracy dan model loss
def plotmodelhistory(history): 
    fig, axs = plt.subplots(1,2,figsize=(15,5)) 
    # menjumlahkan nilai accuracy
    axs[0].plot(history.history['mae']) 
    axs[0].plot(history.history['val_mae']) 
    axs[0].set_title('Model MAE')
    axs[0].set_ylabel('MAE') 
    axs[0].set_xlabel('Epoch')
    axs[0].legend(['train', 'validate'], loc='upper left')
    # menjumlahkan nilai loss
    axs[1].plot(history.history['loss']) 
    axs[1].plot(history.history['val_loss']) 
    axs[1].set_title('Model Loss')
    axs[1].set_ylabel('Loss') 
    axs[1].set_xlabel('Epoch')
    axs[1].legend(['train', 'validate'], loc='upper left')
    plt.show()


print(history.history.keys())
plotmodelhistory(history)